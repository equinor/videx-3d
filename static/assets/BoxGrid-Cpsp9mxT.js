import{j as m}from"./jsx-runtime-CmIOflP4.js";import{B as J,V as F}from"./CameraManager-BuezL_By.js";import{G}from"./Grid-Dwex0QcV.js";import{r as p}from"./index-KqYmeiyw.js";const h=new J;function X(d,u){d.updateWorldMatrix(!1,!1);const r=d.geometry;r!==void 0&&(d.boundingBox!==void 0?(d.boundingBox===null&&d.computeBoundingBox(),h.copy(d.boundingBox)):(r.boundingBox===null&&r.computeBoundingBox(),h.copy(r.boundingBox)),isNaN(h.min.x)||isNaN(h.min.y)||isNaN(h.min.z)||(h.applyMatrix4(d.matrixWorld),u.union(h)));const o=d.children;for(let n=0,b=o.length;n<b;n++)X(o[n],u);return u}const P=new F,z=new F,l=new J,N=d=>{const u=p.useRef(null),r=p.useRef({center:[0,0,0],size:[0,0,0]}),{padding:o=[0,0,0],snapTo:n,updateRate:b=1e3,enabled:_=!0,onChange:f}=d,i=p.useMemo(()=>{if(Number.isFinite(o)){const e=o;return{x0:e,x1:e,y0:e,y1:e,z0:e,z1:e}}else if(Array.isArray(o)){const e=o;return{x0:e[0],x1:e[0],y0:e[1],y1:e[1],z0:e[2],z1:e[2]}}else if(o!==void 0){const e=o;return{x0:e.x0||0,x1:e.x1||0,y0:e.y0||0,y1:e.y1||0,z0:e.z0||0,z1:e.z1||0}}return{x0:0,x1:0,y0:0,y1:0,z0:0,z1:0}},[o]);return p.useEffect(()=>{let e=null;return f&&_&&(e=setInterval(()=>{f&&u.current&&u.current.children.length&&(l.makeEmpty(),X(u.current,l),n?(l.min.set(Math.floor((l.min.x-i.x0)/n)*n,Math.floor((l.min.y-i.y0)/n)*n,Math.floor((l.min.z-i.z0)/n)*n),l.max.set(Math.ceil((l.max.x+i.x1)/n)*n,Math.ceil((l.max.y+i.y1)/n)*n,Math.ceil((l.max.z+i.z1)/n)*n)):(l.min.set(l.min.x-i.x0,l.min.y-i.y0,l.min.z-i.z0),l.max.set(l.max.x+i.x1,l.max.y+i.y1,l.max.z+i.z1)),l.getCenter(P),l.getSize(z),(P.x!==r.current.center[0]||P.y!==r.current.center[1]||P.z!==r.current.center[2]||z.x!==r.current.size[0]||z.y!==r.current.size[1]||z.z!==r.current.size[2])&&(r.current.center=P.toArray(),r.current.size=z.toArray(),f(r.current)))},b)),()=>{e&&clearInterval(e)}},[i,n,b,_,f]),m.jsx("group",{...d,ref:u})};try{N.displayName="ObservableGroup",N.__docgenInfo={description:"Monitors the bounds of its children and will invoke a callback when it\nchanges.\n\nThis feature is used by the `BoxGrid` component if `autoSize` is enabled.",displayName:"ObservableGroup",props:{id:{defaultValue:null,description:"Unique number for this {@link Object3D} instance.\n@remarks Note that ids are assigned in chronological order: 1, 2, 3, ..., incrementing by one for each new object.\nExpects a `Integer`",name:"id",required:!1,type:{name:"number | undefined"}},name:{defaultValue:null,description:`Optional name of the object
@remarks _(doesn't need to be unique)_.
@defaultValue \`""\``,name:"name",required:!1,type:{name:"string | undefined"}},visible:{defaultValue:null,description:"Object gets rendered if `true`.\n@defaultValue `true`",name:"visible",required:!1,type:{name:"boolean | undefined"}},userData:{defaultValue:{value:"`{}`"},description:`An object that can be used to store custom data about the {@link Object3D}.
@remarks It should not hold references to _functions_ as these **will not** be cloned.`,name:"userData",required:!1,type:{name:"Record<string, any> | undefined"}},castShadow:{defaultValue:null,description:"Whether the object gets rendered into shadow map.\n@defaultValue `false`",name:"castShadow",required:!1,type:{name:"boolean | undefined"}},receiveShadow:{defaultValue:null,description:"Whether the material receives shadows.\n@defaultValue `false`",name:"receiveShadow",required:!1,type:{name:"boolean | undefined"}},renderOrder:{defaultValue:null,description:`This value allows the default rendering order of {@link https://en.wikipedia.org/wiki/Scene_graph scene graph}
objects to be overridden although opaque and transparent objects remain sorted independently.
@remarks When this property is set for an instance of {@link Group Group}, all descendants objects will be sorted and rendered together.
Sorting is from lowest to highest renderOrder.
@defaultValue \`0\``,name:"renderOrder",required:!1,type:{name:"number | undefined"}},customDepthMaterial:{defaultValue:null,description:`Custom depth material to be used when rendering to the depth map.
@remarks Can only be used in context of meshes.
When shadow-casting with a {@link THREE.DirectionalLight DirectionalLight} or {@link THREE.SpotLight SpotLight},
if you are modifying vertex positions in the vertex shader you must specify a customDepthMaterial for proper shadows.
@defaultValue \`undefined\``,name:"customDepthMaterial",required:!1,type:{name:"Material | undefined"}},customDistanceMaterial:{defaultValue:null,description:"Same as {@link customDepthMaterial}, but used with {@link THREE.Object3DPointLight PointLight}.\n@defaultValue `undefined`",name:"customDistanceMaterial",required:!1,type:{name:"Material | undefined"}},isGroup:{defaultValue:null,description:"Read-only flag to check if a given object is of type {@link Group}.\n@remarks This is a _constant_ value\n@defaultValue `true`",name:"isGroup",required:!1,type:{name:"true | undefined"}},isObject3D:{defaultValue:null,description:"Flag to check if a given object is of type {@link Object3D}.\n@remarks This is a _constant_ value\n@defaultValue `true`",name:"isObject3D",required:!1,type:{name:"true | undefined"}},uuid:{defaultValue:null,description:`{@link http://en.wikipedia.org/wiki/Universally_unique_identifier UUID} of this object instance.
@remarks This gets automatically assigned and shouldn't be edited.`,name:"uuid",required:!1,type:{name:"string | undefined"}},type:{defaultValue:null,description:"A Read-only _string_ to check `this` object type.\n@remarks This can be used to find a specific type of Object3D in a scene.\nSub-classes will update this value.\n@defaultValue `Object3D`",name:"type",required:!1,type:{name:"string | undefined"}},parent:{defaultValue:null,description:"Object's parent in the {@link https://en.wikipedia.org/wiki/Scene_graph scene graph}.\n@remarks An object can have at most one parent.\n@defaultValue `null`",name:"parent",required:!1,type:{name:"Object3D<Object3DEventMap> | null | undefined"}},modelViewMatrix:{defaultValue:null,description:"@defaultValue `new THREE.Matrix4()`",name:"modelViewMatrix",required:!1,type:{name:"Matrix4 | undefined"}},normalMatrix:{defaultValue:null,description:"@defaultValue `new THREE.Matrix3()`",name:"normalMatrix",required:!1,type:{name:"Matrix3 | undefined"}},matrixWorld:{defaultValue:null,description:"The global transform of the object.\n@remarks If the {@link Object3D } has no parent, then it's identical to the local transform {@link THREE.Object3D.matrix .matrix}.\n@defaultValue `new THREE.Matrix4()`",name:"matrixWorld",required:!1,type:{name:"Matrix4 | undefined"}},matrixAutoUpdate:{defaultValue:null,description:"When this is set, it calculates the matrix of position, (rotation or quaternion) and\nscale every frame and also recalculates the matrixWorld property.\n@defaultValue {@link DEFAULT_MATRIX_AUTO_UPDATE } - that is `(true)`.",name:"matrixAutoUpdate",required:!1,type:{name:"boolean | undefined"}},matrixWorldAutoUpdate:{defaultValue:null,description:"If set, then the renderer checks every frame if the object and its children need matrix updates.\nWhen it isn't, then you have to maintain all matrices in the object and its children yourself.\n@defaultValue {@link DEFAULT_MATRIX_WORLD_AUTO_UPDATE } - that is `(true)`.",name:"matrixWorldAutoUpdate",required:!1,type:{name:"boolean | undefined"}},matrixWorldNeedsUpdate:{defaultValue:null,description:"When this is set, it calculates the matrixWorld in that frame and resets this property to false.\n@defaultValue `false`",name:"matrixWorldNeedsUpdate",required:!1,type:{name:"boolean | undefined"}},frustumCulled:{defaultValue:null,description:"When this is set, it checks every frame if the object is in the frustum of the camera before rendering the object.\nIf set to `false` the object gets rendered every frame even if it is not in the frustum of the camera.\n@defaultValue `true`",name:"frustumCulled",required:!1,type:{name:"boolean | undefined"}},animations:{defaultValue:null,description:"Array with object's animation clips.\n@defaultValue `[]`",name:"animations",required:!1,type:{name:"AnimationClip[] | undefined"}},onBeforeShadow:{defaultValue:null,description:`An optional callback that is executed immediately before a 3D object is rendered to a shadow map.
@remarks This function is called with the following parameters: renderer, scene, camera, shadowCamera, geometry,
depthMaterial, group.
Please notice that this callback is only executed for \`renderable\` 3D objects. Meaning 3D objects which
define their visual appearance with geometries and materials like instances of {@link Mesh }, {@link Line },
{@link Points } or {@link Sprite }. Instances of {@link Object3D }, {@link Group } or {@link Bone } are not renderable
and thus this callback is not executed for such objects.`,name:"onBeforeShadow",required:!1,type:{name:"((renderer: WebGLRenderer, scene: Scene, camera: Camera, shadowCamera: Camera, geometry: BufferGeometry<NormalBufferAttributes>, depthMaterial: Material, group: Group<...>) => void) | undefined"}},onAfterShadow:{defaultValue:null,description:`An optional callback that is executed immediately after a 3D object is rendered to a shadow map.
@remarks This function is called with the following parameters: renderer, scene, camera, shadowCamera, geometry,
depthMaterial, group.
Please notice that this callback is only executed for \`renderable\` 3D objects. Meaning 3D objects which
define their visual appearance with geometries and materials like instances of {@link Mesh }, {@link Line },
{@link Points } or {@link Sprite }. Instances of {@link Object3D }, {@link Group } or {@link Bone } are not renderable
and thus this callback is not executed for such objects.`,name:"onAfterShadow",required:!1,type:{name:"((renderer: WebGLRenderer, scene: Scene, camera: Camera, shadowCamera: Camera, geometry: BufferGeometry<NormalBufferAttributes>, depthMaterial: Material, group: Group<...>) => void) | undefined"}},onBeforeRender:{defaultValue:null,description:`An optional callback that is executed immediately before a 3D object is rendered.
@remarks This function is called with the following parameters: renderer, scene, camera, geometry, material, group.
Please notice that this callback is only executed for \`renderable\` 3D objects. Meaning 3D objects which
define their visual appearance with geometries and materials like instances of {@link Mesh }, {@link Line },
{@link Points } or {@link Sprite }. Instances of {@link Object3D }, {@link Group } or {@link Bone } are not renderable
and thus this callback is not executed for such objects.`,name:"onBeforeRender",required:!1,type:{name:"((renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry<NormalBufferAttributes>, material: Material, group: Group<...>) => void) | undefined"}},onAfterRender:{defaultValue:null,description:`An optional callback that is executed immediately after a 3D object is rendered.
@remarks This function is called with the following parameters: renderer, scene, camera, geometry, material, group.
Please notice that this callback is only executed for \`renderable\` 3D objects. Meaning 3D objects which
define their visual appearance with geometries and materials like instances of {@link Mesh }, {@link Line },
{@link Points } or {@link Sprite }. Instances of {@link Object3D }, {@link Group } or {@link Bone } are not renderable
and thus this callback is not executed for such objects.`,name:"onAfterRender",required:!1,type:{name:"((renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry<NormalBufferAttributes>, material: Material, group: Group<...>) => void) | undefined"}},applyMatrix4:{defaultValue:null,description:`Applies the matrix transform to the object and updates the object's position, rotation and scale.
@param matrix`,name:"applyMatrix4",required:!1,type:{name:"((matrix: Matrix4) => void) | undefined"}},applyQuaternion:{defaultValue:null,description:`Applies the rotation represented by the quaternion to the object.
@param quaternion`,name:"applyQuaternion",required:!1,type:{name:"((quaternion: Quaternion) => Group<Object3DEventMap>) | undefined"}},setRotationFromAxisAngle:{defaultValue:null,description:"Calls {@link THREE.Quaternion.setFromAxisAngle setFromAxisAngle}({@link axis}, {@link angle}) on the {@link quaternion.quaternion}.\n@param axis A normalized vector in object space.\n@param angle Angle in radians. Expects a `Float`",name:"setRotationFromAxisAngle",required:!1,type:{name:"((axis: Vector3, angle: number) => void) | undefined"}},setRotationFromEuler:{defaultValue:null,description:`Calls {@link THREE.Quaternion.setFromEuler setFromEuler}({@link euler}) on the {@link quaternion.quaternion}.
@param euler Euler angle specifying rotation amount.`,name:"setRotationFromEuler",required:!1,type:{name:"((euler: Euler) => void) | undefined"}},setRotationFromMatrix:{defaultValue:null,description:`Calls {@link THREE.Quaternion.setFromRotationMatrix setFromRotationMatrix}({@link m}) on the {@link quaternion.quaternion}.
@remarks Note that this assumes that the upper 3x3 of m is a pure rotation matrix (i.e, unscaled).
@param m Rotate the quaternion by the rotation component of the matrix.`,name:"setRotationFromMatrix",required:!1,type:{name:"((m: Matrix4) => void) | undefined"}},setRotationFromQuaternion:{defaultValue:null,description:`Copy the given {@link THREE.Quaternion Quaternion} into {@link quaternion.quaternion}.
@param q Normalized Quaternion.`,name:"setRotationFromQuaternion",required:!1,type:{name:"((q: Quaternion) => void) | undefined"}},rotateOnAxis:{defaultValue:null,description:`Rotate an object along an axis in object space.
@remarks The axis is assumed to be normalized.
@param axis A normalized vector in object space.
@param angle The angle in radians. Expects a \`Float\``,name:"rotateOnAxis",required:!1,type:{name:"((axis: Vector3, angle: number) => Group<Object3DEventMap>) | undefined"}},rotateOnWorldAxis:{defaultValue:null,description:`Rotate an object along an axis in world space.
@remarks The axis is assumed to be normalized
Method Assumes no rotated parent.
@param axis A normalized vector in world space.
@param angle The angle in radians. Expects a \`Float\``,name:"rotateOnWorldAxis",required:!1,type:{name:"((axis: Vector3, angle: number) => Group<Object3DEventMap>) | undefined"}},rotateX:{defaultValue:null,description:"Rotates the object around _x_ axis in local space.\n@param rad The angle to rotate in radians. Expects a `Float`",name:"rotateX",required:!1,type:{name:"((angle: number) => Group<Object3DEventMap>) | undefined"}},rotateY:{defaultValue:null,description:"Rotates the object around _y_ axis in local space.\n@param rad The angle to rotate in radians. Expects a `Float`",name:"rotateY",required:!1,type:{name:"((angle: number) => Group<Object3DEventMap>) | undefined"}},rotateZ:{defaultValue:null,description:"Rotates the object around _z_ axis in local space.\n@param rad The angle to rotate in radians. Expects a `Float`",name:"rotateZ",required:!1,type:{name:"((angle: number) => Group<Object3DEventMap>) | undefined"}},translateOnAxis:{defaultValue:null,description:`Translate an object by distance along an axis in object space
@remarks The axis is assumed to be normalized.
@param axis A normalized vector in object space.
@param distance The distance to translate. Expects a \`Float\``,name:"translateOnAxis",required:!1,type:{name:"((axis: Vector3, distance: number) => Group<Object3DEventMap>) | undefined"}},translateX:{defaultValue:null,description:"Translates object along x axis in object space by {@link distance} units.\n@param distance Expects a `Float`",name:"translateX",required:!1,type:{name:"((distance: number) => Group<Object3DEventMap>) | undefined"}},translateY:{defaultValue:null,description:"Translates object along _y_ axis in object space by {@link distance} units.\n@param distance Expects a `Float`",name:"translateY",required:!1,type:{name:"((distance: number) => Group<Object3DEventMap>) | undefined"}},translateZ:{defaultValue:null,description:"Translates object along _z_ axis in object space by {@link distance} units.\n@param distance Expects a `Float`",name:"translateZ",required:!1,type:{name:"((distance: number) => Group<Object3DEventMap>) | undefined"}},localToWorld:{defaultValue:null,description:`Converts the vector from this object's local space to world space.
@param vector A vector representing a position in this object's local space.`,name:"localToWorld",required:!1,type:{name:"((vector: Vector3) => Vector3) | undefined"}},worldToLocal:{defaultValue:null,description:`Converts the vector from world space to this object's local space.
@param vector A vector representing a position in world space.`,name:"worldToLocal",required:!1,type:{name:"((vector: Vector3) => Vector3) | undefined"}},lookAt:{defaultValue:null,description:"Rotates the object to face a point in world space.\n@remarks This method does not support objects having non-uniformly-scaled parent(s).\n@param vector A vector representing a position in world space to look at.\n@remarks This method does not support objects having non-uniformly-scaled parent(s).\n@param x Expects a `Float`\n@param y Expects a `Float`\n@param z Expects a `Float`",name:"lookAt",required:!1,type:{name:"{ (vector: Vector3): void; (x: number, y: number, z: number): void; } | undefined"}},add:{defaultValue:null,description:`Adds another {@link Object3D} as child of this {@link Object3D}.
@remarks An arbitrary number of objects may be added
Any current parent on an {@link object } passed in here will be removed, since an {@link Object3D } can have at most one parent.
@see {@link attach }
@see {@link THREE.Group Group} for info on manually grouping objects.
@param object`,name:"add",required:!1,type:{name:"((...object: Object3D<Object3DEventMap>[]) => Group<Object3DEventMap>) | undefined"}},remove:{defaultValue:null,description:`Removes a {@link Object3D} as child of this {@link Object3D}.
@remarks An arbitrary number of objects may be removed.
@see {@link THREE.Group Group} for info on manually grouping objects.
@param object`,name:"remove",required:!1,type:{name:"((...object: Object3D<Object3DEventMap>[]) => Group<Object3DEventMap>) | undefined"}},removeFromParent:{defaultValue:null,description:"Removes this object from its current parent.",name:"removeFromParent",required:!1,type:{name:"(() => Group<Object3DEventMap>) | undefined"}},clear:{defaultValue:null,description:"Removes all child objects.",name:"clear",required:!1,type:{name:"(() => Group<Object3DEventMap>) | undefined"}},getObjectById:{defaultValue:null,description:`Searches through an object and its children, starting with the object itself, and returns the first with a matching id.
@remarks Note that ids are assigned in chronological order: 1, 2, 3, ..., incrementing by one for each new object.
@see {@link id }
@param id Unique number of the object instance. Expects a \`Integer\``,name:"getObjectById",required:!1,type:{name:"((id: number) => Object3D<Object3DEventMap> | undefined) | undefined"}},getObjectByName:{defaultValue:null,description:`Searches through an object and its children, starting with the object itself, and returns the first with a matching name.
@remarks Note that for most objects the name is an empty string by default
You will have to set it manually to make use of this method.
@param name String to match to the children's Object3D.name property.`,name:"getObjectByName",required:!1,type:{name:"((name: string) => Object3D<Object3DEventMap> | undefined) | undefined"}},getObjectByProperty:{defaultValue:null,description:`Searches through an object and its children, starting with the object itself,
and returns the first with a property that matches the value given.
@param name - the property name to search for.
@param value - value of the given property.`,name:"getObjectByProperty",required:!1,type:{name:"((name: string, value: any) => Object3D<Object3DEventMap> | undefined) | undefined"}},getObjectsByProperty:{defaultValue:null,description:`Searches through an object and its children, starting with the object itself,
and returns the first with a property that matches the value given.
@param name The property name to search for.
@param value Value of the given property.
@param optionalTarget target to set the result. Otherwise a new Array is instantiated. If set, you must clear
this array prior to each call (i.e., array.length = 0;).`,name:"getObjectsByProperty",required:!1,type:{name:"((name: string, value: any, optionalTarget?: Object3D<Object3DEventMap>[] | undefined) => Object3D<Object3DEventMap>[]) | undefined"}},getWorldPosition:{defaultValue:null,description:`Returns a vector representing the position of the object in world space.
@param target The result will be copied into this Vector3.`,name:"getWorldPosition",required:!1,type:{name:"((target: Vector3) => Vector3) | undefined"}},getWorldQuaternion:{defaultValue:null,description:`Returns a quaternion representing the rotation of the object in world space.
@param target The result will be copied into this Quaternion.`,name:"getWorldQuaternion",required:!1,type:{name:"((target: Quaternion) => Quaternion) | undefined"}},getWorldScale:{defaultValue:null,description:`Returns a vector of the scaling factors applied to the object for each axis in world space.
@param target The result will be copied into this Vector3.`,name:"getWorldScale",required:!1,type:{name:"((target: Vector3) => Vector3) | undefined"}},getWorldDirection:{defaultValue:null,description:`Returns a vector representing the direction of object's positive z-axis in world space.
@param target The result will be copied into this Vector3.`,name:"getWorldDirection",required:!1,type:{name:"((target: Vector3) => Vector3) | undefined"}},raycast:{defaultValue:null,description:`Abstract (empty) method to get intersections between a casted ray and this object
@remarks Subclasses such as {@link THREE.Mesh Mesh}, {@link THREE.Line Line}, and {@link THREE.Points Points} implement this method in order to use raycasting.
@see {@link THREE.Raycaster Raycaster}
@param raycaster
@param intersects
@defaultValue \`() => {}\``,name:"raycast",required:!1,type:{name:"((raycaster: Raycaster, intersects: Intersection<Object3D<Object3DEventMap>>[]) => void) | undefined"}},traverse:{defaultValue:null,description:`Executes the callback on this object and all descendants.
@remarks Note: Modifying the scene graph inside the callback is discouraged.
@param callback A function with as first argument an {@link Object3D } object.`,name:"traverse",required:!1,type:{name:"((callback: (object: Object3D<Object3DEventMap>) => any) => void) | undefined"}},traverseVisible:{defaultValue:null,description:`Like traverse, but the callback will only be executed for visible objects
@remarks Descendants of invisible objects are not traversed.
Note: Modifying the scene graph inside the callback is discouraged.
@param callback A function with as first argument an {@link Object3D } object.`,name:"traverseVisible",required:!1,type:{name:"((callback: (object: Object3D<Object3DEventMap>) => any) => void) | undefined"}},traverseAncestors:{defaultValue:null,description:`Executes the callback on all ancestors.
@remarks Note: Modifying the scene graph inside the callback is discouraged.
@param callback A function with as first argument an {@link Object3D } object.`,name:"traverseAncestors",required:!1,type:{name:"((callback: (object: Object3D<Object3DEventMap>) => any) => void) | undefined"}},updateMatrix:{defaultValue:null,description:"Updates local transform.",name:"updateMatrix",required:!1,type:{name:"(() => void) | undefined"}},updateMatrixWorld:{defaultValue:null,description:"Updates the global transform of the object.\nAnd will update the object descendants if {@link matrixWorldNeedsUpdate.matrixWorldNeedsUpdate} is set to true or if the {@link force} parameter is set to `true`.\n@param force A boolean that can be used to bypass {@link matrixWorldAutoUpdate .matrixWorldAutoUpdate}, to recalculate the world matrix of the object and descendants on the current frame.\nUseful if you cannot wait for the renderer to update it on the next frame, assuming {@link matrixWorldAutoUpdate .matrixWorldAutoUpdate} set to `true`.",name:"updateMatrixWorld",required:!1,type:{name:"((force?: boolean | undefined) => void) | undefined"}},updateWorldMatrix:{defaultValue:null,description:`Updates the global transform of the object.
@param updateParents Recursively updates global transform of ancestors.
@param updateChildren Recursively updates global transform of descendants.`,name:"updateWorldMatrix",required:!1,type:{name:"((updateParents: boolean, updateChildren: boolean) => void) | undefined"}},toJSON:{defaultValue:null,description:`Convert the object to three.js {@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4 JSON Object/Scene format}.
@param meta Object containing metadata such as materials, textures or images for the object.`,name:"toJSON",required:!1,type:{name:"((meta?: JSONMeta | undefined) => Object3DJSON) | undefined"}},clone:{defaultValue:null,description:"Returns a clone of `this` object and optionally all descendants.\n@param recursive If true, descendants of the object are also cloned. Default `true`",name:"clone",required:!1,type:{name:"((recursive?: boolean | undefined) => Group<Object3DEventMap>) | undefined"}},copy:{defaultValue:null,description:"Copies the given object into this object.\n@remarks Event listeners and user-defined callbacks ({@link .onAfterRender} and {@link .onBeforeRender}) are not copied.\n@param object\n@param recursive If set to `true`, descendants of the object are copied next to the existing ones. If set to\n`false`, descendants are left unchanged. Default is `true`.",name:"copy",required:!1,type:{name:"((object: Object3D<Object3DEventMap>, recursive?: boolean | undefined) => Group<Object3DEventMap>) | undefined"}},addEventListener:{defaultValue:null,description:`Adds a listener to an event type.
@param type The type of event to listen to.
@param listener The function that gets called when the event is fired.`,name:"addEventListener",required:!1,type:{name:"(<T extends keyof Object3DEventMap>(type: T, listener: EventListener<Object3DEventMap[T], T, Group<Object3DEventMap>>) => void) | undefined"}},hasEventListener:{defaultValue:null,description:`Checks if listener is added to an event type.
@param type The type of event to listen to.
@param listener The function that gets called when the event is fired.`,name:"hasEventListener",required:!1,type:{name:"(<T extends keyof Object3DEventMap>(type: T, listener: EventListener<Object3DEventMap[T], T, Group<Object3DEventMap>>) => boolean) | undefined"}},removeEventListener:{defaultValue:null,description:`Removes a listener from an event type.
@param type The type of the listener that gets removed.
@param listener The listener function that gets removed.`,name:"removeEventListener",required:!1,type:{name:"(<T extends keyof Object3DEventMap>(type: T, listener: EventListener<Object3DEventMap[T], T, Group<Object3DEventMap>>) => void) | undefined"}},dispatchEvent:{defaultValue:null,description:`Fire an event type.
@param event The event that gets fired.`,name:"dispatchEvent",required:!1,type:{name:"(<T extends keyof Object3DEventMap>(event: BaseEvent<T> & Object3DEventMap[T]) => void) | undefined"}},position:{defaultValue:null,description:"",name:"position",required:!1,type:{name:"Vector3 | undefined"}},up:{defaultValue:null,description:"",name:"up",required:!1,type:{name:"Vector3 | undefined"}},scale:{defaultValue:null,description:"",name:"scale",required:!1,type:{name:"Vector3 | undefined"}},rotation:{defaultValue:null,description:"",name:"rotation",required:!1,type:{name:"Euler | undefined"}},matrix:{defaultValue:null,description:"",name:"matrix",required:!1,type:{name:"Matrix4 | undefined"}},quaternion:{defaultValue:null,description:"",name:"quaternion",required:!1,type:{name:"Quaternion | undefined"}},layers:{defaultValue:null,description:"",name:"layers",required:!1,type:{name:"Layers | undefined"}},dispose:{defaultValue:null,description:"",name:"dispose",required:!1,type:{name:"(() => void) | null | undefined"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"((event: ThreeEvent<MouseEvent>) => void) | undefined"}},onContextMenu:{defaultValue:null,description:"",name:"onContextMenu",required:!1,type:{name:"((event: ThreeEvent<MouseEvent>) => void) | undefined"}},onDoubleClick:{defaultValue:null,description:"",name:"onDoubleClick",required:!1,type:{name:"((event: ThreeEvent<MouseEvent>) => void) | undefined"}},onPointerUp:{defaultValue:null,description:"",name:"onPointerUp",required:!1,type:{name:"((event: ThreeEvent<PointerEvent>) => void) | undefined"}},onPointerDown:{defaultValue:null,description:"",name:"onPointerDown",required:!1,type:{name:"((event: ThreeEvent<PointerEvent>) => void) | undefined"}},onPointerOver:{defaultValue:null,description:"",name:"onPointerOver",required:!1,type:{name:"((event: ThreeEvent<PointerEvent>) => void) | undefined"}},onPointerOut:{defaultValue:null,description:"",name:"onPointerOut",required:!1,type:{name:"((event: ThreeEvent<PointerEvent>) => void) | undefined"}},onPointerEnter:{defaultValue:null,description:"",name:"onPointerEnter",required:!1,type:{name:"((event: ThreeEvent<PointerEvent>) => void) | undefined"}},onPointerLeave:{defaultValue:null,description:"",name:"onPointerLeave",required:!1,type:{name:"((event: ThreeEvent<PointerEvent>) => void) | undefined"}},onPointerMove:{defaultValue:null,description:"",name:"onPointerMove",required:!1,type:{name:"((event: ThreeEvent<PointerEvent>) => void) | undefined"}},onPointerMissed:{defaultValue:null,description:"",name:"onPointerMissed",required:!1,type:{name:"((event: MouseEvent) => void) | undefined"}},onPointerCancel:{defaultValue:null,description:"",name:"onPointerCancel",required:!1,type:{name:"((event: ThreeEvent<PointerEvent>) => void) | undefined"}},onWheel:{defaultValue:null,description:"",name:"onWheel",required:!1,type:{name:"((event: ThreeEvent<WheelEvent>) => void) | undefined"}},padding:{defaultValue:null,description:"",name:"padding",required:!1,type:{name:"number | Vec3 | BoxPadding | undefined"}},snapTo:{defaultValue:null,description:"",name:"snapTo",required:!1,type:{name:"number | undefined"}},updateRate:{defaultValue:null,description:"",name:"updateRate",required:!1,type:{name:"number | undefined"}},enabled:{defaultValue:null,description:"",name:"enabled",required:!1,type:{name:"boolean | undefined"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((state: ObservableGroupState) => void) | undefined"}}}}}catch{}const H=({name:d,visible:u,castShadow:r,receiveShadow:o,layers:n,renderOrder:b,userData:_,size:f=[0,0,0],cellSize:i=10,gridScale:e=[1,-1,-1],gridOrigin:s=[0,0,0],originValue:c=[0,0,0],subDivisions:v=5,position:C=[0,0,0],gridLineWidth:y=.02,background:g=1056816,backgroundOpacity:j=1,opacity:x=1,gridColorMajor:V="#89a",gridColorMinor:k="#789",axesColor:q="#fff",axesLineWidth:E=y||.05,axesTickSize:O=.1,enableProjection:D,projectionColor:M,projectionResolution:w=2048,projectionRefreshRate:T,showRulers:A=!1,autoSize:W=!1,autoSizePadding:Y=0,autoSizeUpdateRate:Z=1e3,children:S})=>{const[a,U]=p.useState(C),[t,I]=p.useState(f),L=p.useRef(null),[B,K]=p.useState(a);return p.useEffect(()=>{W||(U(C),I(f))},[f,C,W]),p.useEffect(()=>{var R;if(L.current){const Q=new F;(R=L.current)==null||R.getWorldPosition(Q),K(Q.toArray())}},[a]),m.jsxs("group",{ref:L,name:d,userData:_,visible:u,renderOrder:b,children:[m.jsx(G,{plane:"xz",originValue:[c[0],c[2]],cellSize:i,size:[t[0],t[2]],position:[a[0],a[1]-t[1]*.5,a[2]],gridScale:[e[0],e[2]],gridOrigin:[s[0],s[2]],subDivisions:v,gridLineWidth:y,background:g,backgroundOpacity:j,gridColorMajor:V,gridColorMinor:k,opacity:x,axesColor:q,axesLineWidth:E,axesTickSize:O,trimAxesLabels:!0,side:"both",enableProjection:D,projectionResolution:w,projectionColor:M,projectionDistance:t[1],projectionRefreshRate:T,showRulers:A,castShadow:r,receiveShadow:o,layers:n}),m.jsx(G,{plane:"xy",originValue:[c[0],c[1]],cellSize:i,size:[t[0],t[1]],position:[a[0],a[1],a[2]-t[2]*.5],gridScale:[e[0],e[1]],axesOffset:[-a[0]-B[0]*e[0],t[1]*.5*e[1]],gridOrigin:[s[0],s[1]],subDivisions:v,gridLineWidth:y,background:g,backgroundOpacity:j,gridColorMajor:V,gridColorMinor:k,opacity:x,axesColor:q,axesLineWidth:E,axesTickSize:O,trimAxesLabels:!0,side:"front",enableProjection:D,projectionResolution:w,projectionColor:M,projectionDistance:t[2],projectionRefreshRate:T,showRulers:A,castShadow:r,receiveShadow:o,layers:n}),m.jsx(G,{plane:"zy",originValue:[c[2],c[1]],cellSize:i,size:[t[2],t[1]],position:[a[0]-t[0]*.5,a[1],a[2]],gridScale:[e[2],e[1]],axesOffset:[a[2]-B[2]*e[2],t[1]*.5*e[1]],gridOrigin:[s[2],s[1]],subDivisions:v,gridLineWidth:y,background:g,backgroundOpacity:j,gridColorMajor:V,gridColorMinor:k,opacity:x,axesColor:q,axesLineWidth:E,axesTickSize:O,trimAxesLabels:!0,side:"front",enableProjection:D,projectionResolution:w,projectionColor:M,projectionDistance:t[0],projectionRefreshRate:T,showRulers:A,castShadow:r,receiveShadow:o,layers:n}),m.jsx(G,{plane:"xy",originValue:[c[0],c[1]],cellSize:i,size:[t[0],t[1]],position:[a[0],a[1],a[2]+t[2]*.5],gridScale:[e[0],e[1]],axesOffset:[-a[0]-B[0]*e[0],t[1]*.5*e[1]],gridOrigin:[s[0],s[1]],subDivisions:v,gridLineWidth:y,background:g,backgroundOpacity:j,gridColorMajor:V,gridColorMinor:k,opacity:x,axesColor:q,axesLineWidth:E,axesTickSize:O,trimAxesLabels:!0,side:"back",enableProjection:D,projectionResolution:w,projectionColor:M,projectionDistance:t[2],projectionRefreshRate:T,showRulers:A,castShadow:r,receiveShadow:o,layers:n}),m.jsx(G,{plane:"zy",originValue:[c[2],c[1]],cellSize:i,size:[t[2],t[1]],position:[a[0]+t[0]*.5,a[1],a[2]],gridScale:[e[2],e[1]],axesOffset:[a[2]-B[2]*e[2],t[1]*.5*e[1]],gridOrigin:[s[2],s[1]],subDivisions:v,gridLineWidth:y,background:g,backgroundOpacity:j,gridColorMajor:V,gridColorMinor:k,opacity:x,axesColor:q,axesLineWidth:E,axesTickSize:O,trimAxesLabels:!0,side:"back",enableProjection:D,projectionResolution:w,projectionColor:M,projectionDistance:t[0],projectionRefreshRate:T,showRulers:A,castShadow:r,receiveShadow:o,layers:n}),W&&m.jsx(N,{padding:Y,updateRate:Z,snapTo:i,onChange:R=>{I(R.size),U(R.center)},children:S}),!W&&S]})};try{H.displayName="BoxGrid",H.__docgenInfo={description:"Renders 5 grid planes in a box form (bottom and sides). See `Grid` for more info.",displayName:"BoxGrid",props:{name:{defaultValue:null,description:"",name:"name",required:!1,type:{name:"string | undefined"}},visible:{defaultValue:null,description:"",name:"visible",required:!1,type:{name:"boolean | undefined"}},userData:{defaultValue:null,description:"",name:"userData",required:!1,type:{name:"Record<string, any> | undefined"}},position:{defaultValue:{value:"[0, 0, 0]"},description:"",name:"position",required:!1,type:{name:"Vec3 | undefined"}},castShadow:{defaultValue:null,description:"",name:"castShadow",required:!1,type:{name:"boolean | undefined"}},receiveShadow:{defaultValue:null,description:"",name:"receiveShadow",required:!1,type:{name:"boolean | undefined"}},renderOrder:{defaultValue:null,description:"",name:"renderOrder",required:!1,type:{name:"number | undefined"}},layers:{defaultValue:null,description:"",name:"layers",required:!1,type:{name:"Layers | undefined"}},size:{defaultValue:{value:"[0, 0, 0]"},description:"",name:"size",required:!1,type:{name:"Vec3 | undefined"}},cellSize:{defaultValue:{value:"10"},description:"",name:"cellSize",required:!1,type:{name:"number | undefined"}},subDivisions:{defaultValue:{value:"5"},description:"",name:"subDivisions",required:!1,type:{name:"number | undefined"}},gridScale:{defaultValue:{value:"[1, -1, -1]"},description:"",name:"gridScale",required:!1,type:{name:"Vec3 | undefined"}},gridOrigin:{defaultValue:{value:"[0, 0, 0]"},description:"",name:"gridOrigin",required:!1,type:{name:"Vec3 | undefined"}},originValue:{defaultValue:{value:"[0, 0, 0]"},description:"",name:"originValue",required:!1,type:{name:"Vec3 | undefined"}},gridLineWidth:{defaultValue:{value:"0.02"},description:"",name:"gridLineWidth",required:!1,type:{name:"number | undefined"}},background:{defaultValue:{value:"1056816"},description:"",name:"background",required:!1,type:{name:"string | number | Color | undefined"}},backgroundOpacity:{defaultValue:{value:"1"},description:"",name:"backgroundOpacity",required:!1,type:{name:"number | undefined"}},opacity:{defaultValue:{value:"1"},description:"",name:"opacity",required:!1,type:{name:"number | undefined"}},gridColorMajor:{defaultValue:{value:"#89a"},description:"",name:"gridColorMajor",required:!1,type:{name:"string | number | Color | undefined"}},gridColorMinor:{defaultValue:{value:"#789"},description:"",name:"gridColorMinor",required:!1,type:{name:"string | number | Color | undefined"}},axesColor:{defaultValue:{value:"#fff"},description:"",name:"axesColor",required:!1,type:{name:"string | number | Color | undefined"}},axesLineWidth:{defaultValue:{value:"(gridLineWidth || 0.05)"},description:"",name:"axesLineWidth",required:!1,type:{name:"number | undefined"}},axesTickSize:{defaultValue:{value:"0.1"},description:"",name:"axesTickSize",required:!1,type:{name:"number | undefined"}},enableProjection:{defaultValue:null,description:"",name:"enableProjection",required:!1,type:{name:"boolean | undefined"}},projectionColor:{defaultValue:null,description:"",name:"projectionColor",required:!1,type:{name:"string | number | Color | undefined"}},projectionResolution:{defaultValue:{value:"2048"},description:"",name:"projectionResolution",required:!1,type:{name:"number | undefined"}},projectionRefreshRate:{defaultValue:null,description:"",name:"projectionRefreshRate",required:!1,type:{name:"number | undefined"}},showRulers:{defaultValue:{value:"false"},description:"",name:"showRulers",required:!1,type:{name:"boolean | undefined"}},autoSize:{defaultValue:{value:"false"},description:"",name:"autoSize",required:!1,type:{name:"boolean | undefined"}},autoSizePadding:{defaultValue:{value:"0"},description:"",name:"autoSizePadding",required:!1,type:{name:"number | Vec3 | BoxPadding | undefined"}},autoSizeUpdateRate:{defaultValue:{value:"1000"},description:"",name:"autoSizeUpdateRate",required:!1,type:{name:"number | undefined"}}}}}catch{}export{H as B,N as O};
