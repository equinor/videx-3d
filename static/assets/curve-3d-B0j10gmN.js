import{C as p,n as u,c as g,a as h,m as f,E as b,b as A,d,r as x}from"./index.esm-BMr5xbKZ.js";function C(i,o=!1){const m={alpha:1,tension:0,closed:o},t=new p(i,m);return{getPointAt:e=>t.getPointAt(e),getPoints:(e,a=0,r=1)=>t.getPoints(e,null,a,r),getTangentAt:e=>t.getTangentAt(e),getNormalAt:e=>t.getNormalAt(e),getBoundingBox:(e=0,a=1)=>{const r=t.getBoundingBox(e,a);return{min:r.min,max:r.max}},nearest:e=>{const a=t.getNearestPosition(e);return{position:a.u,point:a.point,distance:a.distance}},get length(){return t.length},closed:o}}function B(i,o){const m=o.length,t=new Array(m);if(!t.length)return[];o.forEach((n,c)=>{t[c]={curvePosition:n,position:i.getPointAt(n),tangent:i.getTangentAt(n),normal:[0,0,0],binormal:[0,0,0]}});let l=[0,1,0],e=Math.abs(t[0].tangent[1]);const a=Math.abs(t[0].tangent[0]),r=Math.abs(t[0].tangent[2]);a<=e&&(e=a,l=[1,0,0]),r<=e&&(l=[0,0,1]);let s=u(g(t[0].tangent,l));t[0].normal=g(t[0].tangent,s),t[0].binormal=g(t[0].tangent,t[0].normal);for(let n=1;n<o.length;n++){if(s=g(t[n-1].tangent,t[n].tangent),t[n].normal=h(t[n-1].normal),f(s)>b){u(s);const c=Math.acos(A(d(t[n-1].tangent,t[n].tangent),-1,1));x(t[n-1].normal,s,c,t[n].normal)}t[n].binormal=g(t[n].tangent,t[n].normal)}return t}export{B as c,C as g};
