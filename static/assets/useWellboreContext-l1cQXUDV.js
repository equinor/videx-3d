import{j as c,k as a}from"./CameraManager-BTlj_2qD.js";import{r as o}from"./index-KqYmeiyw.js";import{c as y,d as l}from"./generators-provider-decorator-BR7wOsTW.js";function s(r,e){switch(e){case"Uint8Array":return new Uint8Array(r);case"Uint16Array":return new Uint16Array(r);case"Uint32Array":return new Uint32Array(r);case"Int8Array":return new Int8Array(r);case"Int16Array":return new Int16Array(r);case"Int32Array":return new Int32Array(r);case"Float32Array":return new Float32Array(r);case"Float64Array":return new Float64Array(r);default:throw Error("Unsupported typed array!")}}function w(r){const e=new c;if(r.index){const t=s(r.index,r.indexType||"Uint32Array"),n=new a(t,1);e.setIndex(n)}for(const t in r.attributes){const n=new a(s(r.attributes[t].buffer,r.attributes[t].attributeType),r.attributes[t].itemSize);e.setAttribute(t,n)}return e.drawRange=r.drawRange,e.groups=r.groups,r.userData&&(e.userData=r.userData),e}const i=r=>{const e=o.useContext(y),t=o.useCallback((...n)=>e.invoke(r,...n),[r,e]);return e?t:()=>Promise.resolve(null)};try{i.displayName="useGenerator",i.__docgenInfo={description:"Access a generator function from within a component.",displayName:"useGenerator",props:{}}}catch{}const u=()=>{const r=o.useContext(l);if(!r)throw Error("useWellboreContext may only be used within a Wellbore component!");return r};try{u.displayName="useWellboreContext",u.__docgenInfo={description:"Get the wellbore context from a parent `Wellbore` component.",displayName:"useWellboreContext",props:{}}}catch{}export{i as a,w as b,u};
